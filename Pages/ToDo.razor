@page "/todo"
@using MyProductivityWebApp.Data
@using MyProductivityWebApp.Data.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits OwningComponentBase<ToDoListService>

<PageTitle>To-do</PageTitle>

<h1>To-Do</h1>

<AuthorizeView>
    <Authorized>
        <h2>Showing tasks for: @context.User.Identity?.Name.</h2>

        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Due Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var toDoList in toDoLists)
                {
                    <tr>
                        <td>@toDoList.Title</td>
                        <td>@toDoList.Description</td>
                        <td>@toDoList.DueDate?.ToShortDateString()</td>
                        <td>
                            <button class="btn btn-primary" @onclick="(() => EditToDoList(toDoList))">Edit</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <p>
            <!-- Add a new task -->
            <button class="btn btn-success" @onclick="AddNewToDoList">Add New Task</button>
        </p>
    </Authorized>
    <NotAuthorized>
        <h2>Login to see your tasks or register to get started keeping track of your tasks!</h2>
    </NotAuthorized>
</AuthorizeView>

@if (ShowPopup)
{
    <!-- This is the popup to create or edit a task -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Edit Task</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close" @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current task -->
                <div class="modal-body">
                    <input class="form-control" type="text" placeholder="Title" @bind="toDoList.Title" />
                    <input class="form-control" type="text" placeholder="Description" @bind="toDoList.Description" />
                    <input class="form-control" type="date" placeholder="Due Date" @bind="toDoList.DueDate" />
                    <br />
                    <!-- Button to save the task -->
                    <button class="btn btn-success" @onclick="SaveToDoList">Save</button>&nbsp;
                    <!-- Only show delete button if not a new record -->
                    @if (toDoList.Id > 0)
                    {
                        <!-- Button to delete the task -->
                        <button class="btn btn-danger" @onclick="DeleteToDoList">Delete</button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    List<ToDoList> toDoLists = new List<ToDoList>();

    private string usernameIdentity = "";

    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;

            if (user.Identity != null)
            {
                usernameIdentity = user.Identity.Name ?? "";
            }
        }

        toDoLists = await @Service.GetToDoListsAsync(usernameIdentity);
    }

    ToDoList toDoList = new ToDoList();

    bool ShowPopup = false;

    void ClosePopup()
    {
        ShowPopup = false;
    }

    void AddNewToDoList()
    {
        toDoList = new ToDoList();
        toDoList.Id = 0;
        ShowPopup = true;
    }

    async Task SaveToDoList()
    {
        ShowPopup = false;

        if (toDoList.Id == 0)
        {
            ToDoList newToDoList = new ToDoList();
            newToDoList.Title = toDoList.Title;
            newToDoList.Description = toDoList.Description;
            newToDoList.DueDate = toDoList.DueDate;
            newToDoList.UserName = usernameIdentity;

            var result = @Service.CreateToDoListAsync(newToDoList);
        }
        else
        {
            var result = @Service.UpdateToDoListAsync(toDoList);
        }

        toDoLists = await @Service.GetToDoListsAsync(usernameIdentity);
    }

    void EditToDoList(ToDoList selectedToDoList)
    {
        toDoList = selectedToDoList;
        ShowPopup = true;
    }

    async Task DeleteToDoList()
    {
        ShowPopup = false;
        var result = @Service.DeleteToDoListAsync(toDoList);
        toDoLists = await @Service.GetToDoListsAsync(usernameIdentity);
    }
}
